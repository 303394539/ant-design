// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Popconfirm confirmLoading 1`] = `
<Popconfirm
  confirmLoading={true}
  defaultVisible={true}
  disabled={false}
  icon={<ForwardRef(ExclamationCircleFilled) />}
  okType="primary"
  placement="top"
  title="code"
  transitionName="zoom-big"
  trigger="click"
>
  <Tooltip
    arrowPointAtCenter={false}
    autoAdjustOverflow={true}
    confirmLoading={true}
    defaultVisible={true}
    disabled={false}
    icon={<ForwardRef(ExclamationCircleFilled) />}
    mouseEnterDelay={0.1}
    mouseLeaveDelay={0.1}
    okType="primary"
    onVisibleChange={[Function]}
    overlay={
      <LocaleReceiver
        componentName="Popconfirm"
        defaultLocale={
          Object {
            "cancelText": "Cancel",
            "okText": "OK",
          }
        }
      >
        [Function]
      </LocaleReceiver>
    }
    placement="top"
    prefixCls="ant-popover"
    title="code"
    transitionName="zoom-big"
    trigger="click"
    visible={true}
  >
    <ForwardRef(Tooltip)
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      builtinPlacements={
        Object {
          "bottom": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tc",
              "bc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomLeft": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomRight": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "left": Object {
            "ignoreShake": true,
            "offset": Array [
              -4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cr",
              "cl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftBottom": Object {
            "ignoreShake": true,
            "offset": Array [
              -4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftTop": Object {
            "ignoreShake": true,
            "offset": Array [
              -4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "right": Object {
            "ignoreShake": true,
            "offset": Array [
              4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cl",
              "cr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightBottom": Object {
            "ignoreShake": true,
            "offset": Array [
              4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightTop": Object {
            "ignoreShake": true,
            "offset": Array [
              4,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "top": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              -4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bc",
              "tc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topLeft": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              -4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topRight": Object {
            "ignoreShake": true,
            "offset": Array [
              0,
              -4,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
        }
      }
      confirmLoading={true}
      defaultVisible={true}
      disabled={false}
      icon={<ForwardRef(ExclamationCircleFilled) />}
      mouseEnterDelay={0.1}
      mouseLeaveDelay={0.1}
      okType="primary"
      onPopupAlign={[Function]}
      onVisibleChange={[Function]}
      overlay={
        <LocaleReceiver
          componentName="Popconfirm"
          defaultLocale={
            Object {
              "cancelText": "Cancel",
              "okText": "OK",
            }
          }
        >
          [Function]
        </LocaleReceiver>
      }
      overlayClassName=""
      placement="top"
      prefixCls="ant-popover"
      title="code"
      transitionName="zoom-big"
      trigger="click"
      visible={true}
    >
      <Trigger
        action="click"
        afterPopupVisibleChange={[Function]}
        arrowPointAtCenter={false}
        autoAdjustOverflow={true}
        blurDelay={0.15}
        builtinPlacements={
          Object {
            "bottom": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tc",
                "bc",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "bottomLeft": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tl",
                "bl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "bottomRight": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tr",
                "br",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "left": Object {
              "ignoreShake": true,
              "offset": Array [
                -4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "cr",
                "cl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "leftBottom": Object {
              "ignoreShake": true,
              "offset": Array [
                -4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "br",
                "bl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "leftTop": Object {
              "ignoreShake": true,
              "offset": Array [
                -4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tr",
                "tl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "right": Object {
              "ignoreShake": true,
              "offset": Array [
                4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "cl",
                "cr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "rightBottom": Object {
              "ignoreShake": true,
              "offset": Array [
                4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bl",
                "br",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "rightTop": Object {
              "ignoreShake": true,
              "offset": Array [
                4,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tl",
                "tr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "top": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                -4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bc",
                "tc",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "topLeft": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                -4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bl",
                "tl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "topRight": Object {
              "ignoreShake": true,
              "offset": Array [
                0,
                -4,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "br",
                "tr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
          }
        }
        confirmLoading={true}
        defaultPopupVisible={true}
        destroyPopupOnHide={false}
        disabled={false}
        focusDelay={0}
        getDocument={[Function]}
        getPopupClassNameFromAlign={[Function]}
        hideAction={Array []}
        icon={<ForwardRef(ExclamationCircleFilled) />}
        mask={false}
        maskClosable={true}
        mouseEnterDelay={0.1}
        mouseLeaveDelay={0.1}
        okType="primary"
        onPopupAlign={[Function]}
        onPopupVisibleChange={[Function]}
        overlay={
          <LocaleReceiver
            componentName="Popconfirm"
            defaultLocale={
              Object {
                "cancelText": "Cancel",
                "okText": "OK",
              }
            }
          >
            [Function]
          </LocaleReceiver>
        }
        popup={[Function]}
        popupAlign={Object {}}
        popupClassName=""
        popupPlacement="top"
        popupStyle={Object {}}
        popupTransitionName="zoom-big"
        popupVisible={true}
        prefixCls="ant-popover"
        showAction={Array []}
        title="code"
        visible={true}
      >
        <span
          className="ant-popover-open"
          key="trigger"
          onClick={[Function]}
          onMouseDown={[Function]}
          onTouchStart={[Function]}
        >
          show me your code
        </span>
        <MockPortal
          didUpdate={[Function]}
          getContainer={[Function]}
          key="portal"
        >
          <Popup
            align={
              Object {
                "ignoreShake": true,
                "offset": Array [
                  0,
                  -4,
                ],
                "overflow": Object {
                  "adjustX": 1,
                  "adjustY": 1,
                },
                "points": Array [
                  "bc",
                  "tc",
                ],
                "targetOffset": Array [
                  0,
                  0,
                ],
              }
            }
            className=""
            destroyPopupOnHide={false}
            getClassNameFromAlign={[Function]}
            getRootDomNode={[Function]}
            mask={false}
            onAlign={[Function]}
            onMouseDown={[Function]}
            onTouchStart={[Function]}
            prefixCls="ant-popover"
            style={Object {}}
            transitionName="zoom-big"
            visible={true}
          >
            <div>
              <ForwardRef
                motionAppear={false}
                motionEnter={false}
                motionLeave={false}
                motionName="zoom-big"
                onEnterEnd={[Function]}
                onLeaveEnd={[Function]}
                removeOnLeave={false}
                visible={true}
              >
                <CSSMotion
                  internalRef={null}
                  motionAppear={false}
                  motionEnter={false}
                  motionLeave={false}
                  motionName="zoom-big"
                  onEnterEnd={[Function]}
                  onLeaveEnd={[Function]}
                  removeOnLeave={false}
                  visible={true}
                >
                  <Align
                    align={
                      Object {
                        "ignoreShake": true,
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 1,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bc",
                          "tc",
                        ],
                        "targetOffset": Array [
                          0,
                          0,
                        ],
                      }
                    }
                    disabled={true}
                    key="popup"
                    monitorWindowResize={true}
                    onAlign={[Function]}
                    target={[Function]}
                  >
                    <PopupInner
                      className="ant-popover"
                      hiddenClassName="ant-popover-hidden"
                      onMouseDown={[Function]}
                      onTouchStart={[Function]}
                      prefixCls="ant-popover"
                      style={
                        Object {
                          "opacity": 0,
                          "zIndex": undefined,
                        }
                      }
                      visible={true}
                    >
                      <div
                        className="ant-popover"
                        onMouseDown={[Function]}
                        onTouchStart={[Function]}
                        style={
                          Object {
                            "opacity": 0,
                            "zIndex": undefined,
                          }
                        }
                      >
                        <div
                          className="ant-popover-content"
                        >
                          <div
                            className="ant-popover-arrow"
                            key="arrow"
                          />
                          <Content
                            key="content"
                            overlay={
                              <LocaleReceiver
                                componentName="Popconfirm"
                                defaultLocale={
                                  Object {
                                    "cancelText": "Cancel",
                                    "okText": "OK",
                                  }
                                }
                              >
                                [Function]
                              </LocaleReceiver>
                            }
                            prefixCls="ant-popover"
                          >
                            <div
                              className="ant-popover-inner"
                              role="tooltip"
                            >
                              <LocaleReceiver
                                componentName="Popconfirm"
                                defaultLocale={
                                  Object {
                                    "cancelText": "Cancel",
                                    "okText": "OK",
                                  }
                                }
                              >
                                <div
                                  className="ant-popover-inner-content"
                                >
                                  <div
                                    className="ant-popover-message"
                                  >
                                    <ForwardRef(ExclamationCircleFilled)>
                                      <AntdIcon
                                        icon={
                                          Object {
                                            "icon": Object {
                                              "attrs": Object {
                                                "focusable": "false",
                                                "viewBox": "64 64 896 896",
                                              },
                                              "children": Array [
                                                Object {
                                                  "attrs": Object {
                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z",
                                                  },
                                                  "tag": "path",
                                                },
                                              ],
                                              "tag": "svg",
                                            },
                                            "name": "exclamation-circle",
                                            "theme": "filled",
                                          }
                                        }
                                      >
                                        <span
                                          aria-label="exclamation-circle"
                                          className="anticon anticon-exclamation-circle"
                                          role="img"
                                        >
                                          <IconReact
                                            className=""
                                            icon={
                                              Object {
                                                "icon": Object {
                                                  "attrs": Object {
                                                    "focusable": "false",
                                                    "viewBox": "64 64 896 896",
                                                  },
                                                  "children": Array [
                                                    Object {
                                                      "attrs": Object {
                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z",
                                                      },
                                                      "tag": "path",
                                                    },
                                                  ],
                                                  "tag": "svg",
                                                },
                                                "name": "exclamation-circle",
                                                "theme": "filled",
                                              }
                                            }
                                          >
                                            <svg
                                              aria-hidden="true"
                                              className=""
                                              data-icon="exclamation-circle"
                                              fill="currentColor"
                                              focusable="false"
                                              height="1em"
                                              key="svg-exclamation-circle"
                                              viewBox="64 64 896 896"
                                              width="1em"
                                            >
                                              <path
                                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"
                                                key="svg-exclamation-circle-svg-0"
                                              />
                                            </svg>
                                          </IconReact>
                                        </span>
                                      </AntdIcon>
                                    </ForwardRef(ExclamationCircleFilled)>
                                    <div
                                      className="ant-popover-message-title"
                                    >
                                      code
                                    </div>
                                  </div>
                                  <div
                                    className="ant-popover-buttons"
                                  >
                                    <Button
                                      block={false}
                                      ghost={false}
                                      htmlType="button"
                                      loading={false}
                                      onClick={[Function]}
                                      size="small"
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn ant-btn-sm"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <ForwardRef
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <CSSMotion
                                                internalRef={null}
                                                motionAppear={true}
                                                motionEnter={true}
                                                motionLeave={true}
                                                motionName="ant-btn-loading-icon-motion"
                                                onAppearActive={[Function]}
                                                onAppearStart={[Function]}
                                                onEnterActive={[Function]}
                                                onEnterStart={[Function]}
                                                onLeaveActive={[Function]}
                                                onLeaveStart={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              />
                                            </ForwardRef>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            Cancel
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                    <Button
                                      block={false}
                                      ghost={false}
                                      htmlType="button"
                                      loading={true}
                                      onClick={[Function]}
                                      size="small"
                                      type="primary"
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn ant-btn-primary ant-btn-sm ant-btn-loading"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={true}
                                            prefixCls="ant-btn"
                                          >
                                            <ForwardRef
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={true}
                                            >
                                              <CSSMotion
                                                internalRef={null}
                                                motionAppear={true}
                                                motionEnter={true}
                                                motionLeave={true}
                                                motionName="ant-btn-loading-icon-motion"
                                                onAppearActive={[Function]}
                                                onAppearStart={[Function]}
                                                onEnterActive={[Function]}
                                                onEnterStart={[Function]}
                                                onLeaveActive={[Function]}
                                                onLeaveStart={[Function]}
                                                removeOnLeave={true}
                                                visible={true}
                                              >
                                                <span
                                                  className="ant-btn-loading-icon"
                                                >
                                                  <ForwardRef(LoadingOutlined)
                                                    className=""
                                                  >
                                                    <AntdIcon
                                                      className=""
                                                      icon={
                                                        Object {
                                                          "icon": Object {
                                                            "attrs": Object {
                                                              "focusable": "false",
                                                              "viewBox": "0 0 1024 1024",
                                                            },
                                                            "children": Array [
                                                              Object {
                                                                "attrs": Object {
                                                                  "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z",
                                                                },
                                                                "tag": "path",
                                                              },
                                                            ],
                                                            "tag": "svg",
                                                          },
                                                          "name": "loading",
                                                          "theme": "outlined",
                                                        }
                                                      }
                                                    >
                                                      <span
                                                        aria-label="loading"
                                                        className="anticon anticon-loading"
                                                        role="img"
                                                      >
                                                        <IconReact
                                                          className="anticon-spin"
                                                          icon={
                                                            Object {
                                                              "icon": Object {
                                                                "attrs": Object {
                                                                  "focusable": "false",
                                                                  "viewBox": "0 0 1024 1024",
                                                                },
                                                                "children": Array [
                                                                  Object {
                                                                    "attrs": Object {
                                                                      "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z",
                                                                    },
                                                                    "tag": "path",
                                                                  },
                                                                ],
                                                                "tag": "svg",
                                                              },
                                                              "name": "loading",
                                                              "theme": "outlined",
                                                            }
                                                          }
                                                        >
                                                          <svg
                                                            aria-hidden="true"
                                                            className="anticon-spin"
                                                            data-icon="loading"
                                                            fill="currentColor"
                                                            focusable="false"
                                                            height="1em"
                                                            key="svg-loading"
                                                            viewBox="0 0 1024 1024"
                                                            width="1em"
                                                          >
                                                            <path
                                                              d="M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"
                                                              key="svg-loading-svg-0"
                                                            />
                                                          </svg>
                                                        </IconReact>
                                                      </span>
                                                    </AntdIcon>
                                                  </ForwardRef(LoadingOutlined)>
                                                </span>
                                              </CSSMotion>
                                            </ForwardRef>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            OK
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </div>
                                </div>
                              </LocaleReceiver>
                            </div>
                          </Content>
                        </div>
                      </div>
                    </PopupInner>
                  </Align>
                </CSSMotion>
              </ForwardRef>
            </div>
          </Popup>
        </MockPortal>
      </Trigger>
    </ForwardRef(Tooltip)>
  </Tooltip>
</Popconfirm>
`;

exports[`Popconfirm rtl render component should be rendered correctly in RTL direction 1`] = `<span />`;

exports[`Popconfirm should show overlay when trigger is clicked 1`] = `"<div class=\\"ant-popover-content\\"><div class=\\"ant-popover-arrow\\"></div><div class=\\"ant-popover-inner\\" role=\\"tooltip\\"><div class=\\"ant-popover-inner-content\\"><div class=\\"ant-popover-message\\"><span role=\\"img\\" aria-label=\\"exclamation-circle\\" class=\\"anticon anticon-exclamation-circle\\"><svg viewBox=\\"64 64 896 896\\" focusable=\\"false\\" class=\\"\\" data-icon=\\"exclamation-circle\\" width=\\"1em\\" height=\\"1em\\" fill=\\"currentColor\\" aria-hidden=\\"true\\"><path d=\\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z\\"></path></svg></span><div class=\\"ant-popover-message-title\\">code</div></div><div class=\\"ant-popover-buttons\\"><button type=\\"button\\" class=\\"ant-btn ant-btn-sm\\"><span>Cancel</span></button><button type=\\"button\\" class=\\"ant-btn ant-btn-primary ant-btn-sm\\"><span>OK</span></button></div></div></div></div>"`;

exports[`Popconfirm should show overlay when trigger is clicked 2`] = `"<div class=\\"ant-popover-content\\"><div class=\\"ant-popover-arrow\\"></div><div class=\\"ant-popover-inner\\" role=\\"tooltip\\"><div class=\\"ant-popover-inner-content\\"><div class=\\"ant-popover-message\\"><span role=\\"img\\" aria-label=\\"exclamation-circle\\" class=\\"anticon anticon-exclamation-circle\\"><svg viewBox=\\"64 64 896 896\\" focusable=\\"false\\" class=\\"\\" data-icon=\\"exclamation-circle\\" width=\\"1em\\" height=\\"1em\\" fill=\\"currentColor\\" aria-hidden=\\"true\\"><path d=\\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z\\"></path></svg></span><div class=\\"ant-popover-message-title\\">code</div></div><div class=\\"ant-popover-buttons\\"><button type=\\"button\\" class=\\"ant-btn ant-btn-sm\\"><span>Cancel</span></button><button type=\\"button\\" class=\\"ant-btn ant-btn-primary ant-btn-sm\\"><span>OK</span></button></div></div></div></div>"`;

exports[`Popconfirm shows content for render functions 1`] = `"<div class=\\"ant-popover-content\\"><div class=\\"ant-popover-arrow\\"></div><div class=\\"ant-popover-inner\\" role=\\"tooltip\\"><div class=\\"ant-popover-inner-content\\"><div class=\\"ant-popover-message\\"><span role=\\"img\\" aria-label=\\"exclamation-circle\\" class=\\"anticon anticon-exclamation-circle\\"><svg viewBox=\\"64 64 896 896\\" focusable=\\"false\\" class=\\"\\" data-icon=\\"exclamation-circle\\" width=\\"1em\\" height=\\"1em\\" fill=\\"currentColor\\" aria-hidden=\\"true\\"><path d=\\"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z\\"></path></svg></span><div class=\\"ant-popover-message-title\\">some-title</div></div><div class=\\"ant-popover-buttons\\"><button type=\\"button\\" class=\\"ant-btn ant-btn-sm\\"><span>Cancel</span></button><button type=\\"button\\" class=\\"ant-btn ant-btn-primary ant-btn-sm\\"><span>OK</span></button></div></div></div></div>"`;
